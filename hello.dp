module "krishna"

import "io" 
import {conv,...} from "strings"


//type alias
type T = int
type T = string
type T = rune
type T = float
type T = double
type T = boolean
type T = list
type T = map
type T = undefined




class Say do
    Say() do
        pass
    end
    
    //operator overloading
    operator[]() do
        pass
    end
end

class Hello: Hello, Bind do
     //instance variable
     set,get @name: T 
     //class variable
     $static: T

     Hello() 
         let a = "hello" 
     end
     
     //functions are default immutable

     public sayHello() do
       io.print("name")
     end

     private setName(s: String) do
         pass
     end

     private setToday(s) do
         pass
     end

     internal take(argument) do
         pass
     end	 
end

fun Main() do
  let a = 2
  let b = "string"
  let c: string = c + b
  //immutable with !
  let list!
  let list = [1,2,3,4,5]
  let list2 = ["string", 2.02, true]
  let map = ()


  //"string"
  let a = "string" + undefined
  //"2string"
  let x = 2 + "string"
  
  //int
  let add = 2 + 2
  
  //float
  let addf = 2.02 + 2

  switch(hello) do
      "hello": io.Print()
               break
      default: throw Exception()
  end
  
  //handle async task
  try
      //await closure
      let callback = await () do
          pass
      end
      fetch("https://www.google.com",callback)
  end   

  let a = switch(hello) do

  end

  

  try
      fun raise(name) do
          return name + "krishna"
      end
      raise("satya")
  catch(Exception) do
      throw StringException()
  end


  while(h != false) do
      if(i == 0) do
         break
      end	
      io.Print("hello")
  end



  if(t != true) do
      pass
  else if(typeof(t) == boolean) do
      pass
  end

  for i do 
      range(0,10)
  end

  //closure
  let a = () do

  end


  return 
end
